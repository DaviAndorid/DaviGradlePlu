/***
 * gradle在安卓中的拓展学习
 *
 * 【java工程和gradle】
 * 普通的Java工程比较简单，因为它有一个有限的任务集合，
 * 而且它的属性或者方法都是Java Gradle插件添加的，比较固定，
 * 而且我们访问任务以及任务里的方法和属性都比较方便，
 * 比如classes这个编译Java源代码的任务，我们通过project.tasks.classes就可以访问它，非常快捷
 *
 * 【安卓工程和gradle】
 * 但是对于Android工程，就不行了，Android工程相对与Java工程来说，
 * 要复杂的多，因为它有很多相同的任务，
 * 这些任务的名字都是通过Build Types和Product Flavors 生成的，是动态的创建和生成的，
 * 而且时机比较靠后，如果你还像原来一样在某个闭包里通过project.tasks获取一个任务，
 * 会提示找不到该任务，因为还没有生成。
 * */

this.afterEvaluate {
    //link {org.gradle.language.nativeplatform.internal.Dimensions}
    /***
     * 【变体】
     * Android构建的产物，比如ApplicationVariant可以代表google渠道的release包，
     * 也可以代表dev开发用的debug包
     *
     * 特别注意的是：
     * 访问以上这三种集合都会触发创建所有的任务，这意味着访问这些集合后无须重新配置就会产生，
     * 也就是说假如我们通过访问这些集合，修改生成Apk的输出文件名，那么就会自动的触发创建所有任务，
     * 此时我们修改后的新的Apk文件名就会起作用，达到可我们修改Apk文件名的目的
     * 例子：
     *  applicationVariants.all { variant ->
     *
     *         variant.outputs.each { output ->
     *
     *             if (output.outputFile != null && output.outputFile.name.endsWith('.apk') &&'release'.equals(variant.buildType.name)) {*
     *                 def flavorName = variant.flavorName.startsWith("_") ? variant.flavorName.substring(1) : variant.flavorName
     *                 def apkFile = new File(output.outputFile.getParent(), "App_${flavorName}_v${variant.versionName}_${buildTime()}.apk")
     *                 output.outputFile = apkFile
     *}*}*}*
     * Android项目中会有大量相同的task，并且它们的名字基于Build Types和Product Flavor生成。
     * 为了解决这个问题，android对象有两个属性：
     * （1）applicationVariants（只适用于app plugin）
     * （2）libraryVariants（只适用于library plugin）
     * （3）testVariants（两个plugin都适用）
     *
     * 直接访问所有对象，或者通过过滤器进行筛选。
     * android.applicationVariants.each { variant ->
     *     ....
     *}*
     *
     * 这三个variant类都共享下面的属性：
     *
     * 属性名	            属性类型	                说明
     * name	                String	                Variant的名字，必须是唯一的。
     * description	        String	                Variant的描述说明。
     * dirName	            String	                Variant的子文件夹名，必须也是唯一的。可能也会有不止一个子文件夹，例如“debug/flavor1”
     * baseName	            String	                Variant输出的基础名字，必须唯一。
     * outputFile	        File	                Variant的输出，这是一个可读可写的属性。
     * processManifest	    ProcessManifest	        处理Manifest的task。
     * aidlCompile	        AidlCompile         	编译AIDL文件的task。
     * renderscriptCompile	RenderscriptCompile	    编译Renderscript文件的task。
     * mergeResources	    MergeResources	        混合资源文件的task。
     * mergeAssets	        MergeAssets	            混合asset的task。
     * processResources	    ProcessAndroidResources	处理并编译资源文件的task。
     * generateBuildConfig	GenerateBuildConfig	    生成BuildConfig类的task。
     * javaCompile	        JavaCompile	            编译Java源代码的task。
     * processJavaResources	Copy	                处理Java资源的task。
     * assemble         	DefaultTask	            Variant的标志性assemble task。
     *
     * 差异化的属性比较多，这里不一一列举
     * 具体见：
     * http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision/advanced_build_customization/manipulation_taskstask.html
     *
     *
     * */


}


this.afterEvaluate {
    //有图.....
    this.android.applicationVariants.each { variant ->
        //debug || release
        println '【applicationVariants】name is : ' + variant.name
        //debug || release
        println '【applicationVariants】baseName is : ' + variant.baseName
        //1.0
        println '【applicationVariants】versionName is : ' + variant.versionName
        /***
         * 【1】实现改apk输出的名字
         * */
        //output.outputFile = apkFile  //重命名后的apk文件指向output，实现apk重命名
        variant.outputs.each { output ->
            //ktplay_android_sdk_CN_v4/DaviPlu/app/build/outputs/apk/debug/app-debug.apk
            //ktplay_android_sdk_CN_v4/DaviPlu/app/build/outputs/apk/release/app-release-unsigned.apk
            File outputFile = output.outputFile
            println '【applicationVariants】【output.outputFile】 path : ' + outputFile.path
            println '【applicationVariants】output name : ' + output.name
        }
    }
}

this.afterEvaluate {
    //有图....
    this.android.applicationVariants.each { variant ->
        //debug || release
        println '【applicationVariants】buildType.name is : ' + variant.buildType.name

        /**
         * 【2】变体中，找到某个任务，然后插入自己要执行的任务（利用doLast/doFirst等）
         * */
        Task checkManifest = variant.checkManifest
        checkManifest.doFirst {
            println '【applicationVariants】在 checkManifest 任务执行前插入的代码块 '
        }
    }
}




